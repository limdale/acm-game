
BasicGame.Game = function (game) {

	//	When a State is added to Phaser it automatically has the following properties set on it, even if they already exist:

    this.game;		//	a reference to the currently running game
    this.add;		//	used to add sprites, text, groups, etc
    this.camera;	//	a reference to the game camera
    this.cache;		//	the game cache
    this.input;		//	the global input manager (you can access this.input.keyboard, this.input.mouse, as well from it)
    this.load;		//	for preloading assets
    this.math;		//	lots of useful common math operations
    this.sound;		//	the sound manager - add a sound, play one, set-up markers, etc
    this.stage;		//	the game stage
    this.time;		//	the clock
    this.tweens;    //  the tween manager
    this.state;	    //	the state manager
    this.world;		//	the game world
    this.particles;	//	the particle manager
    this.physics;	//	the physics manager
    this.rnd;		//	the repeatable random number generator

    //	You can use any of these from any function within this State.
    //	But do consider them as being 'reserved words', i.e. don't create a property for your own game called "world" or you'll over-write the world reference.

};

BasicGame.Game.prototype = {

	PLAYER_SPEED: 150,
	WORD_TO_COMPLETE: '0123',
	create: function () {

		//	Honestly, just about anything could go here. It's YOUR game after all. Eat your heart out!
		this.physics.startSystem(Phaser.Physics.ARCADE);
		this.bg = this.add.tileSprite(0, 0, 800, 600, 'sky');
		
		this.numbersAndLetters = this.add.group();
		this.numbersAndLetters.enableBody = true;
		this.numbersAndLetters.physicsBodyType = Phaser.Physics.ARCADE;
		this.addCollectible(500,200,'zero');
		this.addCollectible(500,300,'one');
		
		this.player = this.add.sprite(32, this.world.height - 150, 'player');
		this.physics.arcade.enable(this.player);
		this.player.body.collideWorldBounds = true;
		this.player.animations.add('walk')
		
		this.arrowKeys = this.input.keyboard.createCursorKeys();

		this.initializeWord();

	},

	update: function () {

		//	Honestly, just about anything could go here. It's YOUR game after all. Eat your heart out!
		this.player.body.velocity.x = 0;
		this.player.body.velocity.y = 0;
		this.pollMovementInput();
		this.checkCollisions();
		
	},

	quitGame: function (pointer) {

		//	Here you should destroy anything you no longer need.
		//	Stop music, delete sprites, purge caches, free resources, all that good stuff.

		//	Then let's go back to the main menu.
		this.state.start('MainMenu');

	},

	translate: function(character)
	{
		if(character=='0')
			return 'zero';
		if(character=='1')
			return 'one';

		return 'unknown';
	},

	initializeWord: function()
	{
		this.goalWordArray = [];
		for(var i=0; i<this.WORD_TO_COMPLETE.length; i++)
		{
			this.goalWordArray[i] = this.translate(this.WORD_TO_COMPLETE[i]);
		}	
	},
	
	addCollectible: function(x,y,collectibleName)
	{
		var newCollectible;
		newCollectible = this.numbersAndLetters.create(x,y,collectibleName);
		
		newCollectible.body.velocity.x = -5;
		newCollectible.name = collectibleName;
	
	},
	
	pollMovementInput: function()
	{
		var moving = false;
		
		if (this.arrowKeys.left.isDown)
		{
			//  Move to the left
			this.player.body.velocity.x = -1*this.PLAYER_SPEED;
			this.player.animations.play('walk');
			moving = true;
		}
		else if (this.arrowKeys.right.isDown)
		{
			//  Move to the right
			this.player.body.velocity.x = this.PLAYER_SPEED;
			this.player.animations.play('walk');
			moving = true;
		}
		
		if (this.arrowKeys.up.isDown)
		{
			//  Move to the right
			this.player.body.velocity.y = -1*this.PLAYER_SPEED; 
			this.player.animations.play('walk');
			moving = true;
		}
		
		else if (this.arrowKeys.down.isDown)
		{
			//  Move to the right
			this.player.body.velocity.y = this.PLAYER_SPEED; 
			this.player.animations.play('walk');
			moving = true;
		}
		
		
		if(!moving)
		{
			this.player.animations.stop();
			this.player.frame = 9;
		}

	},
	
	checkCollisions: function()
	{
		this.physics.arcade.overlap( this.player, this.numbersAndLetters, this.checkCollect, null, this );
	},
	
	checkCollect: function(player,collectible)
	{
		// code to check if corresponding with current one that you should collide with
		s.PLAYER_SPEED += 100;
		collectible.kill();
	},
	
	pollAttackInput: function()
	{
		//if(game.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR))
		//{
		//	player.body.velocity.y = -350;
		//}
	},
	

};
